// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	borrowSystemFieldNames          = builder.RawFieldNames(&BorrowSystem{})
	borrowSystemRows                = strings.Join(borrowSystemFieldNames, ",")
	borrowSystemRowsExpectAutoSet   = strings.Join(stringx.Remove(borrowSystemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	borrowSystemRowsWithPlaceHolder = strings.Join(stringx.Remove(borrowSystemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	borrowSystemModel interface {
		Insert(ctx context.Context, data *BorrowSystem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BorrowSystem, error)
		FindOneByUserIdBookNo(ctx context.Context, userId int64, bookNo string) (*BorrowSystem, error)
		Update(ctx context.Context, data *BorrowSystem) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBorrowSystemModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BorrowSystem struct {
		Id             int64     `db:"id"`
		BookNo         string    `db:"book_no"`          // 书籍号
		UserId         int64     `db:"user_id"`          // 借书人
		Status         int64     `db:"status"`           // 书籍状态，0-未归还，1-已归还
		ReturnPlanDate time.Time `db:"return_plan_date"` // 预计还书时间
		ReturnDate     int64     `db:"return_date"`      // 实际还书时间
		CreateTime     time.Time `db:"create_time"`
		UpdateTime     time.Time `db:"update_time"`
	}
)

func newBorrowSystemModel(conn sqlx.SqlConn) *defaultBorrowSystemModel {
	return &defaultBorrowSystemModel{
		conn:  conn,
		table: "`borrow_system`",
	}
}

func (m *defaultBorrowSystemModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBorrowSystemModel) FindOne(ctx context.Context, id int64) (*BorrowSystem, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", borrowSystemRows, m.table)
	var resp BorrowSystem
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBorrowSystemModel) FindOneByUserIdBookNo(ctx context.Context, userId int64, bookNo string) (*BorrowSystem, error) {
	var resp BorrowSystem
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `book_no` = ? limit 1", borrowSystemRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, bookNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBorrowSystemModel) Insert(ctx context.Context, data *BorrowSystem) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, borrowSystemRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BookNo, data.UserId, data.Status, data.ReturnPlanDate, data.ReturnDate)
	return ret, err
}

func (m *defaultBorrowSystemModel) Update(ctx context.Context, newData *BorrowSystem) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, borrowSystemRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.BookNo, newData.UserId, newData.Status, newData.ReturnPlanDate, newData.ReturnDate, newData.Id)
	return err
}

func (m *defaultBorrowSystemModel) tableName() string {
	return m.table
}
