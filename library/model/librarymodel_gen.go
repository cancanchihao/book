// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	libraryFieldNames          = builder.RawFieldNames(&Library{})
	libraryRows                = strings.Join(libraryFieldNames, ",")
	libraryRowsExpectAutoSet   = strings.Join(stringx.Remove(libraryFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	libraryRowsWithPlaceHolder = strings.Join(stringx.Remove(libraryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	libraryModel interface {
		Insert(ctx context.Context, data *Library) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Library, error)
		FindOneByName(ctx context.Context, name string) (*Library, error)
		Update(ctx context.Context, data *Library) error
		Delete(ctx context.Context, id string) error
	}

	defaultLibraryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Library struct {
		Id          string    `db:"id"`     // 书籍序列号
		Name        string    `db:"name"`   // 书籍名称
		Author      string    `db:"author"` // 书籍作者
		PublishDate time.Time `db:"publish_date"`
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
)

func newLibraryModel(conn sqlx.SqlConn) *defaultLibraryModel {
	return &defaultLibraryModel{
		conn:  conn,
		table: "`library`",
	}
}

func (m *defaultLibraryModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLibraryModel) FindOne(ctx context.Context, id string) (*Library, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", libraryRows, m.table)
	var resp Library
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLibraryModel) FindOneByName(ctx context.Context, name string) (*Library, error) {
	var resp Library
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", libraryRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLibraryModel) Insert(ctx context.Context, data *Library) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, libraryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Author, data.PublishDate)
	return ret, err
}

func (m *defaultLibraryModel) Update(ctx context.Context, newData *Library) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, libraryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Author, newData.PublishDate, newData.Id)
	return err
}

func (m *defaultLibraryModel) tableName() string {
	return m.table
}
